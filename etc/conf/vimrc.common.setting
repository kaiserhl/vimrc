"===============================================================================
" GENERAL SETTINGS
"===============================================================================

"---------------------------------------
" Use Vim settings, rather then Vi settings.
" This must be first, because it changes other options as a side effect.
"--------------------------------------- 
set nocompatible

"---------------------------------------
" Enable file type detection. Use the default filetype settings.
" Also load indent files, to automatically do language-dependent indenting.
"---------------------------------------
filetype on
filetype plugin on

" disabling plugins' specified indent options 
"filetype indent on

"---------------------------------------
" Switch syntax highlighting on.
"---------------------------------------
syntax    on            

"----------------------------------------
" Using a backupdir under UNIX/Linux: you may want to include a line similar to
"   find  $HOME/.vim.backupdir -name "*" -type f -mtime +60 -exec rm -f {} \;
" in one of your shell startup files (e.g. $HOME/.profile)
"----------------------------------------
colorscheme anotherdark

"---------------------------------------
" Various settings
"---------------------------------------
set encoding=utf-8              " encoding using utf-8

"set autoindent                 " copy indent from current line
"set smartindent                 " smart autoindenting when starting a new line

set autoread                    " read open files again when changed outside Vim
set autowrite                   " write a modified buffer on each :next , ...

set backspace=indent,eol,start  " backspacing over everything in insert mode
set browsedir=current           " which directory to use for the file browser

" disabling vim's autocomment; 
" see http://stackoverflow.com/questions/6076592/vim-set-formatoptions-being-lost
autocmd BufNewFile,BufRead * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" scan the files used for autocomplete
" XXX be careful with `i` option where it scans its included files
" this could cause vim be very slow
set complete=.,w,b,u,t,k
set completeopt=menuone,longest,preview

set history=150                 " keep 50 lines of command line history
set hlsearch                    " highlight the last used search pattern
set incsearch                   " do incremental searching

set listchars=tab:>.,eol:\$     " strings to use in 'list' mode
set mouse=a                     " enable the use of the mouse
set popt=left:8pc,right:3pc     " print options
set visualbell                  " visual bell instead of beeping
set noerrorbells visualbell t_vb=

set nowrap                      " do not wrap lines
set ruler                       " show the cursor position all the time
set nu							" display line numbers
set showcmd                     " display incomplete commands
set nolist

set shiftwidth=4                " number of spaces to use for each step of indent
set backspace=2					" backspace key
set tabstop=4
set wildignore=*.bak,*.o,*.e,*~ " wildmenu: ignore these extensions
set wildmenu                    " command-line completion in an enhanced mode
set colorcolumn=80
set noswapfile

"set foldmethod=indent
"set foldlevel=99

set laststatus=2
"set statusline=[%n]\ %<%f\ %([%1*%M%*%R%Y]%)\ \ \ [%{Tlist_Get_Tagname_By_Line()}]\ %=%-19(\LINE\ [%l/%L]\ COL\ [%02c%03V]%)\ %P
set statusline=[%n]\ %<%f\ %([%1*%M%*%R%Y]%)\ \ \ \ %=%-19(\LINE\ [%l/%L]\ COL\ [%02c%03V]%)\ %P

"===============================================================================
" BUFFERS, WINDOWS
"===============================================================================

"---------------------------------------
" The current directory is the directory of the file in the current window.
" XXX This might cause minibufexpl issues
"---------------------------------------
"if has("autocmd")
"  autocmd BufEnter * :lchdir %:p:h
"endif

"---------------------------------------
" Change the working directory to the directory containing the current file
" XXX this might bring minibufexpl issues
"---------------------------------------
"if has("autocmd")
"  autocmd BufEnter * :lchdir %:p:h
"endif " has("autocmd")  

"---------------------------------------
" qmake : set filetype for *.pro  
"---------------------------------------
"if has("autocmd")
"  autocmd BufNewFile,BufRead *.pro  set filetype=qmake
"endif " has("autocmd")

"---------------------------------------
" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
"if has("autocmd")
"endif 
"---------------------------------------
augroup common_setting_last
	autocmd!
	autocmd BufReadPost *
		\ if line("'\"") > 0 && line("'\"") <= line("$") |
		\   exe "normal! g`\"" |
		\ endif
augroup END

"---------------------------------------
" Disable beep 
"---------------------------------------
"et noerrorbells visualbell t_vb=
"f has('autocmd')
"autocmd GUIEnter * set visualbell t_vb=
"endif

"---------------------------------------
" fold
"---------------------------------------
"augroup filetype_vim
"	autocmd!
"	autocmd FileType vim setlocal foldmethod=marker
"augroup END

"===============================================================================
" Mapping Keys
"===============================================================================

"---------------------------------------
" Fast switching between buffers
" The current buffer will be saved before switching to the next one.
" Choose :bprevious or :bnext
"---------------------------------------
" noremap  <silent> <s-tab>       :if &modifiable && !&readonly && 
"     \                      &modified <CR> :write<CR> :endif<CR>:bnext<CR>
"inoremap  <silent> <s-tab>  <C-C>:if &modifiable && !&readonly && 
"     \                      &modified <CR> :write<CR> :endif<CR>:bnext<CR>

"---------------------------------------
" Leave the editor with Ctrl-q : Write all changed buffers and exit Vim
"---------------------------------------
"nnoremap  <C-q>    :wqa<CR>






 
"===============================================================================
" Programming Feature 
"===============================================================================

"---------------------------------------
" comma always followed by a space
"---------------------------------------
"inoremap  ,  ,<Space>

"---------------------------------------
" autocomplete parenthesis, brackets and braces
" autocomplete quotes (visual and select mode)
"---------------------------------------
"inoremap ( ()<Left>
"inoremap [ []<Left>
"inoremap { {}<Left>

"vnoremap ( s()<Esc>P<Right>%
"vnoremap [ s[]<Esc>P<Right>%
"vnoremap { s{}<Esc>P<Right>%

"xnoremap  '  s''<Esc>P<Right>
"xnoremap  \"  s""<Esc>P<Right> (I add a \)
"xnoremap  `  s``<Esc>P<Right>

"----------------------------------------
" highlighting that stays after cursor moves
"----------------------------------------
nnoremap <silent> <Leader>l ml:execute 'match Search /\%'.line('.').'l/'<CR>
"nnoremap <silent> <Leader>c :execute 'match Search /\%'.virtcol('.').'v/'<CR>

"----------------------------------------
" file extension
"----------------------------------------
augroup common_file_extension
	autocmd!
	autocmd BufRead,BufNewFile *.md set filetype=markdown
	autocmd FileType markdown set expandtab
augroup END

"----------------------------------------
" cursor
"----------------------------------------
"augroup common_cursorline
"	au!
"	au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
"	au WinLeave * setlocal nocursorline
"augroup END

"===============================================================================
" VARIOUS PLUGIN CONFIGURATIONS
"===============================================================================

"----------------------------------------
" tagbar 
"----------------------------------------
 noremap <silent> <F11>  <Esc><Esc>:TagbarToggle<CR>
inoremap <silent> <F11>  <Esc><Esc>:TagbarToggle<CR>

let g:tagbar_left = 0
let g:tagbar_width = 30
let g:tagbar_autofocus = 0
let g:tagbar_sort = 1
let g:tagbar_compact = 1

"----------------------------------------
" MiniBufExplor
"----------------------------------------
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModeSelTarget = 1

"----------------------------------------
" NerdTreeToggle 
"----------------------------------------
noremap   <silent> <F12>       :NERDTreeToggle<CR>
let g:NERDTreeWinSize = 25
let g:NERDTreeCaseSensitiveSort = 1
let g:NERDTreeShowHidden = 1
let g:NERDTreeShowBookmarks = 1
let g:NERDTreeShowFiles = 1
let g:NERDTreeDirArrows = 1
let g:NERDTreeQuitOnOpen = 1

"---------------------------------------
" gundoToggle 
"---------------------------------------
noremap   <silent> <F10>       :GundoToggle<CR>

"----------------------------------------
" supertab 
"----------------------------------------
let g:SuperTabDefaultCompletionType = "context"

"---------------------------------------
" ctags
"---------------------------------------
set tags=./tags,tags

"map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
"map <A-]> :vsp <CR>:exec("tag ",.expand("<cword>"))<CR>


"----------------------------------------
" DoxygenToolkit
"----------------------------------------

